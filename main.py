from email import encoders
import random
import argparse
import string
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase


# EMAIL

def send_mail(sender, email_password, receiver, smtp_server, smtp_port, file_path, subject="Passwords", body=None):
    if body == None:
        body = f"Passwords generated by {sender}"
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender, email_password)
        msg = MIMEMultipart()
        msg["From"] = sender
        msg["To"] = receiver
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        with open(file_path, "rb") as file:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(file.read())
            encoders.encode_base64(part)
            part.add_header(
                "Content-Disposition",
                f"attachment; filename= {file_path.split('/')[-1]}"
            )
            msg.attach(part)

        server.sendmail(sender, receiver, msg.as_string())
        server.quit()
        print(
            f"[+] Email successfully sent from address {sender} to address {receiver}")
    except Exception as e:
        print("[-] Email sending error: " + str(e))


def check_email_args(sender, email_password, receiver):
    if sender and email_password and receiver:
        return True
    else:
        return False


def get_inputs():
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--amount", dest="amount",
                        help="The number of passwords to be generated.", type=int,default=1)
    parser.add_argument("-n", "--number", dest="number",
                        help="The amount of numbers to be contained in the password.", type=int,required=False)
    parser.add_argument("-u", "--upper-case", dest="upper_case",
                        help="The amount of capital letters to include in the password.", type=int,required=False)
    parser.add_argument("-l", "--lower-case", dest="lower_case",
                        help="The amount of lowercase letters to be included in the password.", type=int,required=False)
    parser.add_argument("-s", "--special-char", dest="special_char",
                        help="The amount of special characters to be included in the password.", type=int,required=False)
    parser.add_argument("-t", "--total-lenght", dest="total",
                        help="Password length, if used, other parameters are ignored and completely random passwords are generated.", type=int)
    parser.add_argument("-o", "--output-file", default="passwords.txt",
                        dest="passfile", help="The name of the file to save passwords.\nYou have to type the file extension!\nIf you set False, the file will not be written.", required=False)

    # Email Arguments

    parser.add_argument("--sender", dest="sender",
                        help="Address to send e-mail", required=False, type=str)
    parser.add_argument("--password", dest="email_pass",
                        help="Sender password.", required=False, type=str)
    parser.add_argument("--receiver", dest="receiver",
                        help="Email address to receive e-mail.", required=False, type=str)
    parser.add_argument("--subject", dest="subject",
                        help="Subject", required=False, type=str)
    parser.add_argument("--body", dest="body", help="Body",
                        required=False, type=str)
    parser.add_argument("--smtp-server", dest="smtp_server", default="smtp.gmail.com",
                        required=False, type=str, help="SMTP server address. Default: smtp.gmail.com")
    parser.add_argument("--smtp-port", dest="smtp_port", default=587,
                        required=False, type=int, help="SMTP server port number. Default: 587")

    return parser.parse_args()


args = get_inputs()


def generate_char_list(number, upper_case, lower_case, special_char):
    char_list = []
    if not number == None:
        for i in range(number):
            char_list.append(random.choice(string.digits))
    if not upper_case == None:
        for i in range(upper_case):
            char_list.append(random.choice(string.ascii_uppercase))
    if not lower_case == None:
        for i in range(lower_case):
            char_list.append(random.choice(string.ascii_lowercase))
    if not special_char == None:
        for i in range(special_char):
            char_list.append(random.choice(string.punctuation))
    if number == None and upper_case == None and lower_case == None and special_char == None:
        print("[-] To generate a password, you must give at least one argument a numeric value.")
        quit()
    random.shuffle(char_list)
    return char_list


def generate_password(char_list):
    password = "".join(str(i) for i in char_list)
    return password


def generate_passwords(amount):
    passwords = []
    for i in range(amount):
        if args.total:
            password = ""
            for i in range(int(args.total)):
                char_list = string.ascii_letters + string.punctuation + string.digits
                random.shuffle(char_list)
                password = "".join(random.choice(char_list))
            random.shuffle(password)
            passwords.append(password)
        else:
            char_list = generate_char_list(
                args.number, args.upper_case, args.lower_case, args.special_char)
            password = generate_password(char_list)
            passwords.append(password)
    print("[+] Password(s) succesfully generated.")
    return passwords


def generate_passwords_file(file_name, passwords):
    try:
        if not (file_name == "False"):
            with open(file_name, "w", encoding="utf-8") as f:
                f.write("\n".join(passwords))
            print(f"[+] Passwords saved in {file_name} file.")
    except Exception as e:
        print("[-] File write error:" + str(e))


passwords = generate_passwords(args.amount)

for password in passwords:
    print(f"[+] {password}")
generate_passwords_file(args.passfile, passwords)
if check_email_args(args.sender, args.email_pass, args.receiver):
    send_mail(args.sender, args.email_pass, args.receiver,
              args.smtp_server, args.smtp_port, args.passfile, args.subject, args.body)
